import * as Phaser from 'phaser';
export interface CreatePhaserComponentConfig<T extends Phaser.GameObjects.GameObject, P> {
    create: (props: P, game: Phaser.Game) => T;
    applyProps?: (instance: T, oldProps: P, newProps: P) => any;
}
export declare const TYPES: Record<string, string>;
export declare const ELEMENTS: Record<string, CreatePhaserComponentConfig<any, any>>;
/**
 * Create an element based on tag type
 * Similar to react-dom's `React.createElement()`
 *
 * @param {string} type Element type
 * @param {Object} props Component props
 * @param {Object} root Root instance
 */
export declare function createElement(type: keyof typeof TYPES, props: any, root: Phaser.Game): any;
