{"version":3,"file":"react-phaser-fiber.cjs.production.min.js","sources":["../src/components/Scene/SceneContext.tsx","../src/hooks/useScene.ts","../src/components/Game/GameContext.ts","../src/hooks/useGame.ts","../src/utils/findGameObjectsByName.ts","../src/hooks/useArcadeCollider.ts","../src/components/Spawner/SpawnerContext.ts","../src/reconciler/applyProps/sanitizeProps.ts","../src/reconciler/applyProps/applyProps.ts","../src/reconciler/element.ts","../src/reconciler/elements/GameObject.ts","../src/components/Group.tsx","../src/components/GameObject.tsx","../src/hooks/useGameObject.ts","../src/components/ArcadeImage.tsx","../src/components/Sprite.tsx","../src/components/ArcadeSprite.tsx","../src/reconciler/hostconfig.ts","../src/reconciler/index.ts","../src/components/Game/Game.tsx","../src/components/Image.tsx","../src/components/Scene/Scene.tsx","../src/components/Spawner/Spawner.tsx","../src/components/Text.tsx","../src/components/ArcadeCollider.tsx","../src/hooks/useGameEvent.ts","../src/hooks/useGameLoop.ts","../src/hooks/useGamePadEvent.ts","../src/hooks/useInputEvent.ts","../src/hooks/useKeyboardEvent.ts","../src/hooks/useSpawner.ts","../src/components/Spawner/withSpawner.tsx"],"sourcesContent":["import * as React from 'react'\n\nconst SceneContext = React.createContext<Phaser.Scene | null>(null)\n\nexport default SceneContext\n","import { useContext } from 'react'\nimport SceneContext from '../components/Scene/SceneContext'\n\nexport function useScene() {\n  return useContext(SceneContext)\n}\n","import * as React from 'react'\n\nconst GameContext = React.createContext<Phaser.Game | null>(null)\n\nexport default GameContext\n","import { useContext } from 'react'\nimport GameContext from '../components/Game/GameContext'\n\nexport function useGame() {\n  return useContext(GameContext)\n}\n","import { Scene } from 'phaser'\n\nexport function findGameObjectsByName(scene: Scene, name: string) {\n  return scene.children.list.filter(child => child.name === name)\n}\n","import { useLayoutEffect, useRef } from 'react'\nimport { useScene } from './useScene'\nimport { Scene } from 'phaser'\nimport { findGameObjectsByName } from '../utils'\n\nexport type ColliderObjectType = Phaser.GameObjects.GameObject | string\n\n/**\n * Creates a collider between objects or arrays of objects. If provided values are strings, it will\n * search for all objects by that name in the scene.\n */\nexport function useArcadeCollider<\n  T1 extends ColliderObjectType,\n  T2 extends ColliderObjectType\n>(\n  obj1: T1 | T1[],\n  obj2: T2 | T2[],\n  args: {\n    overlapOnly?: boolean\n    onCollide: (\n      obj1: T1 extends string ? any : T1,\n      obj2: T2 extends string ? any : T2\n    ) => any\n    onProcess?: (\n      obj1: T1 extends string ? any : T1,\n      obj2: T2 extends string ? any : T2\n    ) => boolean\n  }\n) {\n  const { onCollide, onProcess, overlapOnly } = args\n  const scene = useScene()\n  const collider = useRef<Phaser.Physics.Arcade.Collider>(null)\n\n  useLayoutEffect(() => {\n    collider.current = scene.physics.add.collider(\n      createObjectsArray(scene, obj1),\n      createObjectsArray(scene, obj2),\n      onCollide,\n      onProcess\n    )\n\n    collider.current.overlapOnly = overlapOnly\n\n    return () => {\n      collider.current.destroy()\n    }\n  }, [])\n\n  // it is much more performant to update the collider via mutations\n  // rather than destroy() and recreate in the above useLayoutEffect\n  useLayoutEffect(() => {\n    if (collider.current) {\n      collider.current.object1 = createObjectsArray(scene, obj1)\n      collider.current.object2 = createObjectsArray(scene, obj2)\n    }\n  }, [obj1, obj2])\n\n  useLayoutEffect(() => {\n    if (collider.current) {\n      collider.current.collideCallback = onCollide\n      collider.current.processCallback = onProcess\n      collider.current.overlapOnly = overlapOnly\n    }\n  }, [onCollide, onProcess, overlapOnly])\n}\n\nfunction createObjectsArray(\n  scene: Scene,\n  objects: ColliderObjectType | ColliderObjectType[]\n) {\n  return toArray(objects).reduce(\n    (total: Phaser.GameObjects.GameObject[], object) => {\n      if (typeof object === 'string') {\n        return [...total, ...findGameObjectsByName(scene, object)]\n      }\n\n      return [...total, object]\n    },\n    []\n  ) as Phaser.GameObjects.GameObject[]\n}\n\nfunction toArray<T>(obj: T): T[] {\n  return Array.isArray(obj) ? obj : [obj]\n}\n","import * as React from 'react'\n\nexport interface SpawnerContextValue {\n  /**\n   * Spawn a component into the parent <Spawner> component\n   *\n   * `component` will be passed an `onDestroy` prop from the spawner. This should\n   * be called when the component needs to be unmounted.\n   */\n  spawn: <P>(component: React.ComponentType<P>, props: P & SpawnProps) => string\n}\n\nexport interface SpawnProps {\n  onDestroy?: () => any\n}\n\nconst SpawnerContext = React.createContext<SpawnerContextValue>(null)\n\nexport default SpawnerContext\n","/**\n * Reserved props\n */\nexport const PROPS_RESERVED = {\n  children: true,\n  parent: true,\n  object: true,\n  physics: true,\n  physicsType: true,\n  instance: true,\n  scene: true,\n}\n\n/**\n * Removes any props that have reserved names\n * @param props\n */\nexport default function sanitizeProps(\n  props: Record<string, any>\n): Record<string, any> {\n  return Object.keys(props).reduce((filteredProps, key) => {\n    if (Object.keys(PROPS_RESERVED).indexOf(key) === -1) {\n      return {\n        ...filteredProps,\n        [key]: props[key],\n      }\n    }\n\n    return {\n      ...filteredProps,\n    }\n  }, {})\n}\n","import sanitizeProps from './sanitizeProps'\n\nexport default function applyProps(\n  instance: any,\n  oldProps: Record<string, any>,\n  newProps: Record<string, any>\n) {\n  Object.keys(sanitizeProps(newProps)).forEach(key => {\n    if (\n      typeof newProps[key] !== 'undefined' &&\n      oldProps[key] !== newProps[key]\n    ) {\n      const newValue: any = newProps[key]\n      const oldValue: any = oldProps[key]\n\n      switch (key) {\n        case 'data':\n          Object.keys(newProps.data).forEach(dataKey => {\n            instance.setData(dataKey, newProps.data[dataKey])\n          })\n          break\n\n        /** Point values **/\n        case 'acceleration':\n        case 'bounce':\n        case 'drag':\n        case 'friction':\n        case 'gravity':\n        case 'velocity':\n        case 'maxVelocity': {\n          const oldPoint = convertToPoint(oldProps[key])\n          const newPoint = convertToPoint(newProps[key])\n          if (!pointsAreEqual(oldPoint, newPoint)) {\n            setProp(instance, key, newPoint.x, newPoint.y)\n          }\n          break\n        }\n\n        /** Animation **/\n        case 'accumulator':\n        case 'delay':\n        case 'duration':\n        case 'forward':\n        case 'frameRate':\n        case 'isPlaying':\n        case 'msPerFrame':\n        case 'skipMissedFrames':\n        case 'progress':\n        case 'stopOnFrame':\n        case 'stopAfterDelay':\n        case 'repeat':\n        case 'repeatDelay':\n        case 'timeScale':\n        case 'yoyo':\n          setProp(instance.anims, key, newValue)\n          break\n        /** Physics **/\n        case 'debug':\n          if (\n            oldProps.debugShowBody !== newProps.debugShowBody ||\n            oldProps.debugShowVelocity !== newProps.debugShowVelocity ||\n            oldProps.debugBodyColor !== newProps.debugBodyColor\n          ) {\n            instance.setDebug(\n              newProps.debugShowBody,\n              newProps.debugShowVelocity,\n              newProps.debugBodyColor\n            )\n          }\n          break\n        case 'disableBody':\n        case 'hideBody':\n          if (\n            oldProps.disableBody !== newProps.disableBody ||\n            oldProps.hideBody !== newProps.hideBody\n          ) {\n            instance.disableBody(newProps.disableBody, newProps.hideBody)\n          }\n          break\n        case 'circle':\n          if (newProps.circle) {\n            if (\n              !oldProps.circle ||\n              oldProps.circle.radius !== newProps.circle.radius ||\n              oldProps.circle.offsetX !== newProps.circle.offsetX ||\n              oldProps.circle.offsetY !== newProps.circle.offsetY\n            ) {\n              instance.setCircle(\n                newProps.circle.radius,\n                newProps.circle.offsetX,\n                newProps.circle.offsetY\n              )\n            }\n          }\n          break\n        case 'offset':\n          if (\n            !oldProps.offset ||\n            oldProps.offset.x !== newProps.offset.x ||\n            oldProps.offset.y !== newProps.offset.y\n          ) {\n            instance.setOffset(newProps.offset.x, newProps.offset.y)\n          }\n          break\n        case 'onWorldBounds':\n          setProp(instance.body, key, newValue)\n          break\n        case 'size':\n          if (newProps.size) {\n            if (\n              !oldProps.size ||\n              oldProps.size.width !== newProps.size.width ||\n              oldProps.size.height !== newProps.size.height ||\n              oldProps.size.center !== newProps.size.center\n            ) {\n              instance.setSize(\n                newProps.size.width,\n                newProps.size.height,\n                newProps.size.center\n              )\n            }\n          }\n          break\n        case 'allowGravity':\n        case 'allowDrag':\n        case 'allowAcceleration':\n          setProp(instance.body, key, newValue)\n          break\n        case 'scale':\n          if (typeof newValue === 'number') {\n            instance.setScale(newValue)\n          } else {\n            instance.setScale(\n              newValue.x,\n              newValue.y,\n              newValue.point ? [newValue.point.x, newValue.point.y] : undefined\n            )\n          }\n\n          // if static, refresh body. there are probably other keys that need this\n          if (instance.body?.physicsType === 1) {\n            instance.body.updateFromGameObject()\n          }\n          break\n        default:\n          setProp(instance, key, newProps[key])\n      }\n    }\n  })\n}\n\nfunction setProp(instance: any, key: string, ...value: any) {\n  // get method name for property. ex: 'setStyle' for 'style'\n  const methodName = `set${key.slice(0, 1).toUpperCase() + key.slice(1)}`\n\n  if (instance[methodName]) {\n    instance[methodName](...value)\n  } else {\n    if (typeof instance[key] === 'function') {\n      instance[key](...value)\n    } else {\n      // ...value will always be an array, so we'll get the [0] value\n      instance[key] = value[0]\n    }\n  }\n}\n\nfunction convertToPoint(num: number | { x: number; y: number }) {\n  if (typeof num === 'number') {\n    return { x: num, y: num }\n  }\n\n  if (!num) {\n    return { x: 0, y: 0 }\n  }\n\n  return num\n}\n\nfunction pointsAreEqual(\n  p1: { x: number; y: number },\n  p2: { x: number; y: number }\n) {\n  return p1.x === p2.x && p1.y === p2.y\n}\n","import * as Phaser from 'phaser'\nimport { applyProps as defaultApplyProps } from './applyProps'\nimport GameObject from './elements/GameObject'\n\nexport interface CreatePhaserComponentConfig<\n  T extends Phaser.GameObjects.GameObject,\n  P\n> {\n  create: (props: P, game: Phaser.Game) => T\n  applyProps?: (instance: T, oldProps: P, newProps: P) => any\n}\n\nexport const TYPES: Record<string, string> = {\n  GameObject: 'GameObject',\n}\n\nexport const ELEMENTS: Record<string, CreatePhaserComponentConfig<any, any>> = {\n  GameObject,\n}\n\n/**\n * Create an element based on tag type\n * Similar to react-dom's `React.createElement()`\n *\n * @param {string} type Element type\n * @param {Object} props Component props\n * @param {Object} root Root instance\n */\nexport function createElement(\n  type: keyof typeof TYPES,\n  props: any = {},\n  root: Phaser.Game\n) {\n  const { create, applyProps = defaultApplyProps } = ELEMENTS[type]\n\n  const instance = create(props, root)\n\n  instance.applyProps = applyProps.bind(instance)\n  applyProps(instance, {}, props)\n\n  return instance\n}\n","import { applyProps } from '../applyProps'\nimport { CreatePhaserComponentConfig } from '../element'\n\nexport interface GameObjectProps<T extends Phaser.GameObjects.GameObject> {\n  instance: T\n  ref?: React.Ref<T>\n  name?: string\n  active?: boolean\n  tabIndex?: boolean\n  data?: any\n  renderFlags?: integer\n  cameraFilter?: number\n  ignoreDestroy?: boolean\n  input?: Phaser.Types.Input.InteractiveObject\n  children?: React.ReactNode\n\n  /**\n   * Creates the body in the phaser for the specified physics world\n   *\n   * note: only 'arcade' is supported for now\n   */\n  physics?: 'arcade'\n  physicsType?: 'static' | 'dynamic'\n}\n\nexport type AlphaProps = Partial<\n  Pick<\n    Phaser.GameObjects.Components.Alpha,\n    | 'alpha'\n    | 'alphaBottomLeft'\n    | 'alphaBottomRight'\n    | 'alphaTopLeft'\n    | 'alphaTopRight'\n  >\n>\n\nexport type Point = {\n  x: number\n  y: number\n}\n\nexport type BlendModeProps = Partial<\n  Pick<Phaser.GameObjects.Components.BlendMode, 'blendMode'>\n>\n\nexport type ComputedSizeProps = Partial<\n  Pick<\n    Phaser.GameObjects.Components.ComputedSize,\n    'displayHeight' | 'displayWidth' | 'height' | 'width'\n  >\n>\n\nexport type CropProps = Partial<\n  Pick<Phaser.GameObjects.Components.Crop, 'frame' | 'isCropped' | 'texture'>\n>\n\nexport type DepthProps = Partial<\n  Pick<Phaser.GameObjects.Components.Depth, 'depth'>\n>\n\nexport type FlipProps = Partial<\n  Pick<Phaser.GameObjects.Components.Flip, 'flipX' | 'flipY'>\n>\n\nexport type MaskProps = Partial<\n  Pick<Phaser.GameObjects.Components.Mask, 'mask'>\n>\n\nexport type OriginProps = Partial<\n  Pick<\n    Phaser.GameObjects.Components.Origin,\n    'originX' | 'originY' | 'displayOriginX' | 'displayOriginY'\n  >\n>\n\nexport type PipelineProps = Partial<\n  Pick<Phaser.GameObjects.Components.Pipeline, 'defaultPipeline' | 'pipeline'>\n>\n\nexport type ScrollFactorProps = Partial<\n  Pick<\n    Phaser.GameObjects.Components.ScrollFactor,\n    'scrollFactorX' | 'scrollFactorY'\n  >\n>\n\nexport type TextureCropProps = Partial<\n  Pick<Phaser.GameObjects.Components.TextureCrop, 'texture' | 'frame'>\n>\nexport type TintProps = Partial<\n  Pick<\n    Phaser.GameObjects.Components.Tint,\n    | 'isTinted'\n    | 'tint'\n    | 'tintBottomLeft'\n    | 'tintBottomRight'\n    | 'tintFill'\n    | 'tintTopLeft'\n    | 'tintTopRight'\n  >\n>\n\nexport type TransformProps = Partial<\n  Pick<\n    Phaser.GameObjects.Components.Transform,\n    'angle' | 'rotation' | 'x' | 'y' | 'z' | 'w'\n  > & {\n    scale?: number | (Point & { point?: Point })\n    allowRotation?: boolean\n  }\n>\n\nexport type VisibleProps = Partial<\n  Pick<Phaser.GameObjects.Components.Visible, 'visible'>\n>\n\nexport interface AnimationProps {\n  playingAnimation?: string\n  accumulator?: number\n  delay?: number\n  duration?: number\n  forward?: boolean\n  frameRate?: number\n  isPlaying?: boolean\n  msPerFrame?: number\n  skipMissedFrames?: boolean\n  repeat?: number\n  repeatDelay?: number\n  timeScale?: number\n  yoyo?: boolean\n}\n\n// Arcade Physics\nexport interface AccelerationProps {\n  accelerationX?: number\n  accelerationY?: number\n  acceleration?: number | Point\n}\n\nexport interface AngularProps {\n  angularAcceleration?: number\n  angularDrag?: number\n  angularVelocity?: number\n}\n\nexport interface BounceProps {\n  bounceX?: number\n  bounceY?: number\n  bounce?: number | Point\n  collideWorldBounds?: boolean\n  onWorldBounds?: boolean\n}\n\nexport interface DebugProps {\n  debugBodyColor?: number\n  debugShowBody?: boolean\n  debugShowVelocity?: boolean\n}\n\nexport interface DragProps {\n  damping?: number\n  dragX?: number\n  dragY?: number\n  drag?: number | Point\n  allowDrag?: boolean\n}\n\nexport interface EnableProps {\n  disableBody?: boolean\n\n  /**\n   * If disableBody is true, this will also hide the body\n   */\n  hideBody?: boolean\n}\n\nexport interface FrictionProps {\n  frictionX?: number\n  frictionY?: number\n  friction?: number | Point\n}\n\nexport interface GravityProps {\n  allowGravity?: boolean\n  gravityX?: number\n  gravityY?: number\n  gravity?: number | Point\n}\n\nexport interface ImmovableProps {\n  immovable?: boolean\n}\n\nexport interface MassProps {\n  mass?: number\n}\n\nexport interface SizeProps {\n  circle?: {\n    radius: number\n    offsetX?: number\n    offsetY?: number\n  }\n  offset?: {\n    x?: number\n    y?: number\n  }\n  size?: {\n    width: number\n    height: number\n    center?: number\n  }\n}\n\nexport interface VelocityProps {\n  velocity?: number | Point\n  velocityX?: number\n  velocityY?: number\n  maxVelocity?: number | Point\n}\n\nconst GameObject: CreatePhaserComponentConfig<\n  Phaser.GameObjects.GameObject,\n  GameObjectProps<Phaser.GameObjects.GameObject> & { scene: Phaser.Scene }\n> = {\n  create: ({ instance, scene, physics, physicsType }) => {\n    // @ts-ignore - we need to set the scene key so hostconfig knows which scene to add this instance to\n    instance.__reactPhaser = {\n      sceneKey: scene.scene.key,\n    }\n\n    // if this is a physics object we need to add the body before applyProps\n    if (physics === 'arcade' && scene) {\n      scene.physics.world.enable(\n        instance,\n        physicsType === 'static'\n          ? Phaser.Physics.Arcade.STATIC_BODY\n          : Phaser.Physics.Arcade.DYNAMIC_BODY\n      )\n    }\n    return instance\n  },\n  applyProps: (instance, oldProps, newProps) => {\n    applyProps(instance, oldProps, newProps)\n  },\n}\n\nexport default GameObject\n","import React, {\n  useMemo,\n  useContext,\n  useLayoutEffect,\n  useImperativeHandle,\n} from 'react'\nimport { useScene } from '../hooks/useScene'\n\nconst GroupContext = React.createContext<Phaser.GameObjects.Group>(null)\n\nexport interface GroupProps {\n  active?: boolean\n  defaultFrame?: number\n  defaultKey?: string\n  isParent?: boolean\n  name?: string\n  children?: React.ReactNode\n}\n\nfunction Group(\n  { children, ...props }: GroupProps,\n  ref: React.Ref<Phaser.GameObjects.Group>\n) {\n  const scene = useScene()\n\n  const group = useMemo(() => scene.add.group([]), [])\n\n  useLayoutEffect(() => {\n    return () => {\n      group.destroy()\n    }\n  }, [])\n\n  useImperativeHandle(ref, () => group)\n\n  useLayoutEffect(() => {\n    group.active = props.active\n    group.defaultFrame = props.defaultFrame\n    group.defaultKey = props.defaultKey\n    group.isParent = props.isParent\n    group.name = props.name\n  }, [props])\n\n  return <GroupContext.Provider value={group}>{children}</GroupContext.Provider>\n}\n\nexport default React.forwardRef(Group)\n\nexport function useGroup<T extends Phaser.GameObjects.Group>() {\n  return useContext(GroupContext) as T\n}\n","import { TYPES } from '../reconciler/element'\nimport { GameObjectProps } from '../reconciler/elements/GameObject'\nimport React, { useLayoutEffect } from 'react'\nimport { useGroup } from './Group'\nimport { useScene } from '../hooks/useScene'\n\nconst GameObjectElement = (TYPES.GameObject as unknown) as React.FC<\n  GameObjectProps<Phaser.GameObjects.GameObject> & { scene: Phaser.Scene }\n>\n\nexport * from '../reconciler/elements/GameObject'\n\nexport const GameObjectContext = React.createContext<\n  Phaser.GameObjects.GameObject\n>(null)\n\nexport default function GameObject<T extends Phaser.GameObjects.GameObject>(\n  props: GameObjectProps<T>\n) {\n  const scene = useScene()\n  const group = useGroup()\n\n  useLayoutEffect(() => {\n    if (group) {\n      group.add(props.instance)\n\n      return () => {\n        group.remove(props.instance)\n      }\n    }\n  }, [group])\n\n  return (\n    <GameObjectContext.Provider value={props.instance}>\n      <GameObjectElement scene={scene} {...props} />\n      {props.children}\n    </GameObjectContext.Provider>\n  )\n}\n","import { useContext } from 'react'\nimport { GameObjectContext } from '../components/GameObject'\n\nexport function useGameObject<T extends Phaser.GameObjects.GameObject>() {\n  return useContext(GameObjectContext) as T\n}\n","import * as Phaser from 'phaser'\nimport GameObject, {\n  AlphaProps,\n  BlendModeProps,\n  ComputedSizeProps,\n  DepthProps,\n  FlipProps,\n  OriginProps,\n  PipelineProps,\n  ScrollFactorProps,\n  TransformProps,\n  VisibleProps,\n  MaskProps,\n  TintProps,\n  GameObjectProps,\n  AccelerationProps,\n  AngularProps,\n  BounceProps,\n  DebugProps,\n  EnableProps,\n  DragProps,\n  FrictionProps,\n  GravityProps,\n  ImmovableProps,\n  MassProps,\n  SizeProps,\n  VelocityProps,\n} from './GameObject'\nimport { useScene } from '../hooks/useScene'\nimport React, { useImperativeHandle, useMemo } from 'react'\n\nexport interface ArcadeImageProps\n  extends Omit<\n      GameObjectProps<Phaser.Physics.Arcade.Image>,\n      'ref' | 'instance' | 'physics'\n    >,\n    AlphaProps,\n    BlendModeProps,\n    ComputedSizeProps,\n    DepthProps,\n    FlipProps,\n    MaskProps,\n    OriginProps,\n    PipelineProps,\n    ScrollFactorProps,\n    TintProps,\n    TransformProps,\n    VisibleProps,\n    AccelerationProps,\n    AngularProps,\n    BounceProps,\n    DebugProps,\n    EnableProps,\n    DragProps,\n    FrictionProps,\n    GravityProps,\n    ImmovableProps,\n    MassProps,\n    SizeProps,\n    VelocityProps {\n  instance?: Phaser.Physics.Arcade.Image\n  texture?: string\n  frame?: string | number\n}\n\nfunction ArcadeImage(\n  props: ArcadeImageProps,\n  ref: React.Ref<Phaser.Physics.Arcade.Image>\n) {\n  const scene = useScene()\n  const instance = useMemo(\n    () =>\n      props.instance ||\n      new Phaser.Physics.Arcade.Image(\n        scene,\n        props.x,\n        props.y,\n        props.texture,\n        props.frame\n      ),\n    []\n  )\n\n  useImperativeHandle(ref, () => instance)\n\n  return <GameObject instance={instance} physics=\"arcade\" {...props} />\n}\n\nexport default React.forwardRef(ArcadeImage)\n","import * as Phaser from 'phaser'\nimport GameObject, {\n  AlphaProps,\n  BlendModeProps,\n  ComputedSizeProps,\n  DepthProps,\n  FlipProps,\n  OriginProps,\n  PipelineProps,\n  ScrollFactorProps,\n  TransformProps,\n  VisibleProps,\n  MaskProps,\n  TintProps,\n  GameObjectProps,\n} from './GameObject'\nimport { useScene } from '../hooks/useScene'\nimport React, { useImperativeHandle, useMemo, useLayoutEffect } from 'react'\nimport { AnimationProps } from '../reconciler/elements/GameObject'\n\nexport interface SpriteProps\n  extends Omit<GameObjectProps<Phaser.GameObjects.Sprite>, 'instance' | 'ref'>,\n    AlphaProps,\n    AnimationProps,\n    BlendModeProps,\n    ComputedSizeProps,\n    DepthProps,\n    FlipProps,\n    MaskProps,\n    OriginProps,\n    PipelineProps,\n    ScrollFactorProps,\n    TintProps,\n    TransformProps,\n    VisibleProps {\n  instance?: Phaser.GameObjects.Sprite\n  animations?: Phaser.Types.Animations.Animation[]\n  animation?: string\n  texture?: string\n  x?: number\n  y?: number\n  frame?: number\n}\n\nfunction Sprite(\n  { animations, animation, ...props }: SpriteProps,\n  ref: React.Ref<Phaser.GameObjects.Sprite>\n) {\n  const scene = useScene()\n  const instance = useMemo(\n    () =>\n      props.instance ||\n      new Phaser.GameObjects.Sprite(\n        scene,\n        props.x,\n        props.y,\n        props.texture,\n        props.frame\n      ),\n    []\n  )\n\n  useImperativeHandle(ref, () => instance)\n\n  useLayoutEffect(() => {\n    if (animations) {\n      animations.forEach(animation => {\n        scene.anims.create(animation)\n      })\n    }\n\n    return () => {\n      if (animations) {\n        animations.forEach(animation => {\n          scene.anims.remove(animation.key)\n        })\n      }\n    }\n  }, [animations])\n\n  useLayoutEffect(() => {\n    if (animation) {\n      instance.play(animation, true)\n    }\n  }, [animation])\n\n  return <GameObject instance={instance} {...props} />\n}\n\nexport default React.forwardRef(Sprite)\n","import * as Phaser from 'phaser'\nimport React, { useImperativeHandle, useLayoutEffect, useMemo } from 'react'\nimport { useScene } from '../hooks/useScene'\nimport GameObject, {\n  AccelerationProps,\n  AlphaProps,\n  AngularProps,\n  AnimationProps,\n  BlendModeProps,\n  BounceProps,\n  ComputedSizeProps,\n  DebugProps,\n  DepthProps,\n  DragProps,\n  EnableProps,\n  FlipProps,\n  FrictionProps,\n  GameObjectProps,\n  GravityProps,\n  ImmovableProps,\n  MaskProps,\n  MassProps,\n  OriginProps,\n  PipelineProps,\n  ScrollFactorProps,\n  SizeProps,\n  TintProps,\n  TransformProps,\n  VelocityProps,\n  VisibleProps,\n} from './GameObject'\nimport Sprite, { SpriteProps } from './Sprite'\n\nexport interface ArcadeSpriteProps\n  extends Omit<SpriteProps, 'ref' | 'instance' | 'physics'>,\n    AlphaProps,\n    AnimationProps,\n    BlendModeProps,\n    ComputedSizeProps,\n    DepthProps,\n    FlipProps,\n    MaskProps,\n    OriginProps,\n    PipelineProps,\n    ScrollFactorProps,\n    TintProps,\n    TransformProps,\n    VisibleProps,\n    AccelerationProps,\n    AngularProps,\n    BounceProps,\n    DebugProps,\n    EnableProps,\n    DragProps,\n    FrictionProps,\n    GravityProps,\n    ImmovableProps,\n    MassProps,\n    SizeProps,\n    VelocityProps {\n  instance?: Phaser.Physics.Arcade.Sprite\n}\n\nfunction ArcadeSprite(\n  props: ArcadeSpriteProps,\n  ref: React.Ref<Phaser.Physics.Arcade.Sprite>\n) {\n  const scene = useScene()\n  const instance = useMemo(\n    () =>\n      props.instance ||\n      new Phaser.Physics.Arcade.Sprite(\n        scene,\n        props.x,\n        props.y,\n        props.texture,\n        props.frame\n      ),\n    []\n  )\n\n  useImperativeHandle(ref, () => instance)\n\n  // reuse the Sprite component because it does some Sprite prop things\n  // but we'll need to disguise the props as any. This is smelly, but does\n  // share the common Sprite logic\n  return <Sprite instance={instance} physics=\"arcade\" {...(props as any)} />\n}\n\nexport default React.forwardRef(ArcadeSprite)\n","/**\n * -------------------------------------------\n * Host Config file.\n *\n * See:\n *   https://github.com/facebook/react/tree/master/packages/react-reconciler\n *   https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\n * -------------------------------------------\n */\n\nimport invariant from 'fbjs/lib/invariant'\nimport performanceNow from 'performance-now'\n\nimport { createElement } from './element'\nimport { applyProps as defaultApplyProps } from './applyProps'\n\ninterface InternalGameObjectProperties {\n  __reactPhaser: { sceneKey: string }\n}\n\nfunction appendChild(\n  parent: Phaser.Game | Phaser.GameObjects.GameObject,\n  child: Phaser.GameObjects.GameObject & InternalGameObjectProperties\n) {\n  // __reactPhaser.sceneKey comes from GameObject's element creator\n  if (parent instanceof Phaser.Game && child.__reactPhaser.sceneKey) {\n    const scene = parent.scene.getScene(child.__reactPhaser.sceneKey)\n    if (!scene.children.exists(child)) {\n      scene.add.existing(child)\n    }\n  }\n\n  if (parent instanceof Phaser.GameObjects.GameObject) {\n    // todo\n  }\n}\n\nfunction removeChild(parent: Phaser.Game, child: any) {\n  if (child.destroy) {\n    child.destroy()\n  }\n}\n\nfunction insertBefore(\n  parent: Phaser.Game,\n  child: Phaser.GameObjects.GameObject & InternalGameObjectProperties,\n  beforeChild: Phaser.GameObjects.GameObject & InternalGameObjectProperties\n) {\n  invariant(\n    child !== beforeChild,\n    'PhaserFiber cannot insert node before itself'\n  )\n\n  if (parent instanceof Phaser.Game) {\n    const scene = parent.scene.getScene(child.__reactPhaser.sceneKey)\n    const childExists = scene.children.exists(child)\n    const index = scene.children.getIndex(beforeChild)\n\n    childExists\n      ? scene.children.moveTo(child, index)\n      : scene.children.addAt(child, index)\n  }\n}\n\n// get diff between 2 objects\n// https://github.com/facebook/react/blob/97e2911/packages/react-dom/src/client/ReactDOMFiberComponent.js#L546\nfunction diffProperties(\n  phaserElement: any,\n  type: any,\n  lastProps: any,\n  nextProps: any,\n  rootContainerElement: any\n) {\n  let updatePayload: any = null\n\n  for (const propKey in lastProps) {\n    if (\n      nextProps.hasOwnProperty(propKey) ||\n      !lastProps.hasOwnProperty(propKey) ||\n      lastProps[propKey] == null\n    ) {\n      continue\n    }\n    if (propKey === 'children') {\n      // Noop. Text children not supported\n    } else {\n      // For all other deleted properties we add it to the queue. We use\n      // the whitelist in the commit phase instead.\n      if (!updatePayload) {\n        updatePayload = []\n      }\n      updatePayload.push(propKey, null)\n    }\n  }\n\n  for (const propKey in nextProps) {\n    const nextProp = nextProps[propKey]\n    const lastProp = lastProps != null ? lastProps[propKey] : undefined\n\n    if (\n      !nextProps.hasOwnProperty(propKey) ||\n      nextProp === lastProp ||\n      (nextProp == null && lastProp == null)\n    ) {\n      continue\n    }\n\n    if (propKey === 'children') {\n      // Noop. Text children not supported\n    } else {\n      // For any other property we always add it to the queue and then we\n      // filter it out using the whitelist during the commit.\n      if (!updatePayload) {\n        updatePayload = []\n      }\n      updatePayload.push(propKey, nextProp)\n    }\n  }\n\n  return updatePayload\n}\n\nexport default {\n  getRootHostContext(rootContainerInstance: any) {\n    return rootContainerInstance\n  },\n\n  getChildHostContext() {\n    return {}\n  },\n\n  getChildHostContextForEventComponent(parentHostContext: any) {\n    return parentHostContext\n  },\n\n  getPublicInstance(instance: any) {\n    return instance\n  },\n\n  prepareForCommit() {\n    // noop\n  },\n\n  resetAfterCommit() {\n    // noop\n  },\n\n  createInstance: createElement,\n\n  hideInstance(instance: Phaser.GameObjects.GameObject) {\n    if (instance.setActive) {\n      instance.setActive(false)\n    }\n  },\n\n  unhideInstance(instance: Phaser.GameObjects.GameObject, props: any) {\n    const active =\n      props !== undefined && props !== null && props.hasOwnProperty('active')\n        ? props.active\n        : true\n\n    instance.setActive(active)\n  },\n\n  appendInitialChild: appendChild,\n\n  finalizeInitialChildren(phaserElement: any, type: any, props: any) {\n    return false\n  },\n\n  prepareUpdate(\n    phaserElement: any,\n    type: any,\n    oldProps: any,\n    newProps: any,\n    rootContainerInstance: any,\n    hostContext: any\n  ) {\n    return diffProperties(\n      phaserElement,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance\n    )\n  },\n\n  shouldSetTextContent(type: any, props: any) {\n    return false\n  },\n\n  shouldDeprioritizeSubtree(\n    type: string,\n    props: Phaser.GameObjects.GameObject\n  ) {\n    const isActive =\n      typeof props.active === 'undefined' || props.active === true\n\n    return !isActive\n  },\n\n  createTextInstance(\n    text: any,\n    rootContainerInstance: any,\n    internalInstanceHandler: any\n  ) {\n    invariant(\n      false,\n      'react-phaser does not support text instances. Use `<Text /> component` instead.'\n    )\n  },\n\n  mountEventComponent() {\n    // noop\n  },\n\n  updateEventComponent() {\n    // noop\n  },\n\n  handleEventTarget() {\n    // noop\n  },\n\n  scheduleTimeout: setTimeout,\n\n  cancelTimeout: clearTimeout,\n\n  noTimeout: -1,\n\n  warnsIfNotActing: false,\n\n  now: performanceNow,\n\n  isPrimaryRenderer: false,\n\n  supportsMutation: true,\n\n  supportsPersistence: false,\n\n  supportsHydration: false,\n\n  /**\n   * -------------------------------------------\n   * Mutation\n   * -------------------------------------------\n   */\n\n  appendChild,\n\n  appendChildToContainer: appendChild,\n\n  removeChild,\n\n  removeChildFromContainer: removeChild,\n\n  insertBefore,\n\n  insertInContainerBefore: insertBefore,\n\n  commitUpdate(\n    instance: any,\n    updatePayload: any,\n    type: any,\n    oldProps: any,\n    newProps: any\n  ) {\n    let applyProps = instance && instance.applyProps\n\n    if (typeof applyProps !== 'function') {\n      applyProps = defaultApplyProps\n    }\n    applyProps(instance, oldProps, newProps)\n  },\n\n  commitMount(\n    instance: any,\n    updatePayload: any,\n    type: any,\n    oldProps: any,\n    newProps: any\n  ) {\n    // noop\n  },\n\n  commitTextUpdate(textInstance: any, oldText: any, newText: any) {\n    // noop\n  },\n\n  resetTextContent(phaserElement: any) {\n    // noop\n  },\n}\n","import Reconciler from 'react-reconciler'\nimport pkg from '../../package.json'\nimport hostconfig from './hostconfig'\n\nexport const PhaserFiber = Reconciler(hostconfig as any)\nexport const VERSION = pkg.version\nexport const PACKAGE_NAME = pkg.name\n","import * as Phaser from 'phaser'\nimport React from 'react'\nimport { FiberRoot } from 'react-reconciler'\nimport { PACKAGE_NAME, PhaserFiber, VERSION } from '../../reconciler'\nimport GameContext from './GameContext'\n\nexport interface GameProps extends Phaser.Types.Core.GameConfig {\n  children?: JSX.Element | JSX.Element[] | React.ReactNode\n}\n\nclass Game extends React.Component<GameProps, { booting: boolean }> {\n  static displayName = 'Game'\n  mountNode: FiberRoot\n  game: Phaser.Game\n\n  state = {\n    booting: true,\n  }\n\n  componentDidMount() {\n    const { children, canvas, ...config } = this.props\n\n    this.game = new Phaser.Game({ ...config })\n\n    this.game.events.on('ready', () => {\n      this.setState({ booting: false })\n    })\n\n    this.mountNode = PhaserFiber.createContainer(this.game, false, false)\n\n    injectDevtools()\n\n    if (process.env.NODE_ENV === 'development') {\n      // @ts-ignore\n      window.game = this.game\n    }\n\n    PhaserFiber.updateContainer(\n      this.getChildren(),\n      this.mountNode,\n      this,\n      null as any\n    )\n  }\n\n  componentDidUpdate() {\n    // flush fiber\n    PhaserFiber.updateContainer(\n      this.getChildren(),\n      this.mountNode,\n      this,\n      null as any\n    )\n  }\n\n  getChildren() {\n    const children = this.state.booting ? null : this.props.children\n\n    return (\n      <GameContext.Provider value={this.game}>{children}</GameContext.Provider>\n    )\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(`Error occurred in \\`Game\\`.`)\n    console.error(error)\n    console.error(errorInfo)\n  }\n\n  componentWillUnmount() {\n    PhaserFiber.updateContainer(null, this.mountNode, this, null as any)\n    this.game.destroy(true)\n  }\n\n  render() {\n    return null as JSX.Element\n  }\n}\n\nexport default Game\n\n/**\n * Inject into React Devtools\n */\nfunction injectDevtools() {\n  PhaserFiber.injectIntoDevTools({\n    bundleType: process.env.NODE_ENV !== 'production' ? 1 : 0,\n    version: VERSION,\n    rendererPackageName: PACKAGE_NAME,\n    findFiberByHostInstance: PhaserFiber.findHostInstance as any,\n  })\n}\n","import * as Phaser from 'phaser'\nimport GameObject, {\n  AlphaProps,\n  BlendModeProps,\n  ComputedSizeProps,\n  DepthProps,\n  FlipProps,\n  OriginProps,\n  PipelineProps,\n  ScrollFactorProps,\n  TransformProps,\n  VisibleProps,\n  MaskProps,\n  TintProps,\n  GameObjectProps,\n} from './GameObject'\nimport { useScene } from '../hooks/useScene'\nimport React, { useImperativeHandle, useMemo } from 'react'\n\nexport interface ImageProps\n  extends Omit<GameObjectProps<Phaser.GameObjects.Image>, 'instance' | 'ref'>,\n    AlphaProps,\n    BlendModeProps,\n    ComputedSizeProps,\n    DepthProps,\n    FlipProps,\n    MaskProps,\n    OriginProps,\n    PipelineProps,\n    ScrollFactorProps,\n    TintProps,\n    TransformProps,\n    VisibleProps {\n  instance?: Phaser.GameObjects.Image\n  texture?: string\n  frame?: string | number\n}\n\nfunction Image(props: ImageProps, ref: React.Ref<Phaser.GameObjects.Image>) {\n  const scene = useScene()\n  const instance = useMemo(\n    () =>\n      props.instance ||\n      new Phaser.GameObjects.Image(\n        scene,\n        props.x,\n        props.y,\n        props.texture,\n        props.frame\n      ),\n    []\n  )\n  useImperativeHandle(ref, () => instance)\n\n  return <GameObject instance={instance} {...props} />\n}\n\nexport default React.forwardRef(Image)\n","import * as Phaser from 'phaser'\nimport React, {\n  useLayoutEffect,\n  useMemo,\n  useState,\n  useImperativeHandle,\n} from 'react'\nimport { useGame } from '../../hooks/useGame'\nimport SceneContext from './SceneContext'\n\nexport interface SceneProps extends Phaser.Types.Scenes.SettingsConfig {\n  sceneKey: string\n  children?: JSX.Element | JSX.Element[] | React.ReactNode\n  onPreload?: (scene: Phaser.Scene) => any\n  onCreate?: (scene: Phaser.Scene) => any\n  onInit?: (scene: Phaser.Scene) => any\n  renderLoading?: (progress: number) => React.ReactNode\n}\n\nfunction Scene(\n  {\n    sceneKey,\n    children,\n    renderLoading,\n    onPreload,\n    onCreate,\n    onInit,\n    ...options\n  }: SceneProps,\n  ref: React.Ref<Phaser.Scene>\n) {\n  const game = useGame()\n  const [loading, setLoading] = useState(!!onPreload)\n  const [loadProgress, setLoadProgress] = useState(0)\n\n  const scene = useMemo(() => {\n    const instance = new Phaser.Scene({\n      ...options,\n      key: sceneKey,\n    })\n\n    // @ts-ignore\n    instance.preload = onPreload\n      ? () => {\n          onPreload(instance)\n          instance.load.once('complete', () => {\n            setLoading(false)\n            setLoadProgress(0)\n          })\n          instance.load.start()\n        }\n      : null\n\n    // @ts-ignore\n    instance.create = onCreate ? () => onCreate(instance) : null\n    // @ts-ignore\n    instance.init = onInit ? () => onInit(instance) : null\n\n    game.scene.add(sceneKey, instance, true)\n\n    return instance\n  }, [])\n\n  useImperativeHandle(ref, () => scene)\n\n  useLayoutEffect(() => {\n    const listeners: Phaser.Events.EventEmitter[] = []\n\n    // can we use suspense instead somehow?\n    listeners.push(\n      scene.load.once('start', () => {\n        setLoading(!!onPreload)\n      }),\n\n      scene.load.on('progress', (progress: number) => {\n        setLoadProgress(progress)\n      })\n    )\n\n    return () => {\n      game.scene.remove(sceneKey)\n\n      listeners.forEach(listener => {\n        listener.eventNames().forEach(event => listener.off(event))\n      })\n    }\n  }, [])\n\n  return (\n    <SceneContext.Provider value={scene}>\n      {loading && renderLoading ? renderLoading(loadProgress) : children}\n    </SceneContext.Provider>\n  )\n}\n\nexport default React.forwardRef(Scene)\n","import React, { useMemo, useReducer } from 'react'\nimport SpawnerContext, { SpawnerContextValue } from './SpawnerContext'\nimport uuid from 'uuid/v4'\n\nexport interface SpawnerProps {\n  children?: JSX.Element | JSX.Element[] | React.ReactNode\n}\n\nexport interface SpawnedChild<P = any> {\n  component: React.ComponentType<P>\n  props: P\n  key: string\n}\n\nexport default function Spawner({ children }: SpawnerProps) {\n  const [state, dispatch] = useReducer(reducer, { children: [] })\n\n  const handleDestroy = (key: string) => {\n    dispatch({ type: 'DESTROY_CHILD', payload: key })\n  }\n\n  const value = useMemo<SpawnerContextValue>(\n    () => ({\n      spawn: (component, props) => {\n        const key = uuid()\n        dispatch({ type: 'SPAWN', payload: { component, props, key } })\n        return key\n      },\n    }),\n    [state]\n  )\n\n  return (\n    <SpawnerContext.Provider value={value}>\n      {state.children.map(child => {\n        return (\n          <child.component\n            key={child.key}\n            {...child.props}\n            onDestroy={() => {\n              if (child.props.onDestroy) {\n                child.props.onDestroy()\n              }\n              handleDestroy(child.key)\n            }}\n          />\n        )\n      })}\n      {children}\n    </SpawnerContext.Provider>\n  )\n}\n\ninterface SpawnerState {\n  children: SpawnedChild[]\n}\n\nfunction reducer(state: SpawnerState, action: { type: string; payload: any }) {\n  switch (action.type) {\n    case 'SPAWN':\n      return {\n        ...state,\n        children: [...state.children, action.payload],\n      }\n    case 'DESTROY_CHILD':\n      return {\n        ...state,\n        children: state.children.filter(child => child.key !== action.payload),\n      }\n  }\n\n  return state\n}\n","import * as Phaser from 'phaser'\nimport React, { useImperativeHandle, useMemo } from 'react'\nimport GameObject, {\n  AlphaProps,\n  BlendModeProps,\n  ComputedSizeProps,\n  CropProps,\n  DepthProps,\n  FlipProps,\n  GameObjectProps,\n  MaskProps,\n  OriginProps,\n  PipelineProps,\n  ScrollFactorProps,\n  TintProps,\n  TransformProps,\n  VisibleProps,\n} from './GameObject'\nimport { useScene } from '../hooks/useScene'\n\nexport interface TextProps\n  extends Omit<GameObjectProps<Phaser.GameObjects.Text>, 'instance' | 'ref'>,\n    AlphaProps,\n    BlendModeProps,\n    ComputedSizeProps,\n    CropProps,\n    DepthProps,\n    FlipProps,\n    MaskProps,\n    OriginProps,\n    PipelineProps,\n    ScrollFactorProps,\n    TintProps,\n    TransformProps,\n    VisibleProps {\n  instance?: Phaser.GameObjects.Text\n  text?: string | string[]\n  style: Phaser.Types.GameObjects.Text.TextStyle\n}\n\nfunction Text(props: TextProps, ref: React.Ref<Phaser.GameObjects.Text>) {\n  const scene = useScene()\n  const instance = useMemo(\n    () =>\n      props.instance ||\n      new Phaser.GameObjects.Text(\n        scene,\n        props.x,\n        props.y,\n        props.text,\n        props.style\n      ),\n    []\n  )\n\n  useImperativeHandle(ref, () => instance)\n\n  return <GameObject instance={instance} {...props} />\n}\n\nexport default React.forwardRef(Text)\n","import { useArcadeCollider, useGameObject, ColliderObjectType } from '../hooks'\n\nexport interface ArcadeColliderProps<With extends ColliderObjectType> {\n  with: With\n  overlapOnly?: boolean\n  onCollide?: (self: any, other: With extends string ? any : With) => any\n  onProcess?: (self: any, other: With extends string ? any : With) => any\n}\n\n/**\n * Creates a collider between the parent GameObject component and the \"with\" prop. The\n * \"with\" prop can either be a GameObject, a ref to a GameObject, or a string matching\n * the name of a GameObject (in Phaser).\n *\n * ```\n *  <ArcadeImage {...props}>\n *    <ArcadeCollider with=\"coin\">\n *  </ArcadeImage>\n * ```\n *\n * You can also use it with a custom GameObject component\n *\n * ```\n *  <GameObject instance={instance}>\n *    <ArcadeCollider with=\"coin\">\n *  </GameObject>\n * ```\n *\n */\nexport default function ArcadeCollider<With extends ColliderObjectType = any>(\n  props: ArcadeColliderProps<With>\n): JSX.Element {\n  const { onCollide, onProcess, overlapOnly } = props\n\n  const gameObject = useGameObject()\n\n  if (!gameObject) {\n    throw Error('ArcadeCollider must be used within a GameObject component')\n  }\n\n  useArcadeCollider(gameObject, props.with, {\n    overlapOnly,\n    onCollide,\n    onProcess,\n  })\n\n  return null\n}\n","import { useGame } from './useGame'\nimport { useEffect } from 'react'\n\nexport function useGameEvent(\n  event: string,\n  onEvent: (...eventArgs: any) => any\n) {\n  const game = useGame()\n\n  useEffect(() => {\n    game.events.on(event, onEvent)\n\n    return () => {\n      game.events.off(event, onEvent)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onEvent])\n}\n","import { useGame } from './useGame'\nimport { useEffect } from 'react'\n\n/**\n * Runs the callback once every \"step\" event\n *\n * note: this is shorthand for useGameEvent(\"step\", callback)\n */\nexport function useGameLoop(\n  onLoop: ({ delta, time }: { delta: number; time: number }) => any\n) {\n  const game = useGame()\n\n  useEffect(() => {\n    const callback = (time: number, delta: number) => {\n      onLoop({ delta, time })\n    }\n    game.events.on('step', callback)\n\n    return () => {\n      game.events.off('step', callback)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onLoop])\n}\n","import { useScene } from './useScene'\nimport { useEffect } from 'react'\nimport invariant from 'fbjs/lib/invariant'\n\nexport function useGamepadEvent(event: string, callback: (event: any) => any) {\n  const scene = useScene()\n\n  useEffect(() => {\n    invariant(\n      !!scene,\n      '`useGamepadEvent` could not find the scene. Make sure it is used in a component that is a child of <Scene />'\n    )\n\n    scene.input.gamepad.on(event, callback)\n\n    return () => {\n      scene.input.gamepad.off(event, callback)\n    }\n  }, [scene, event, callback])\n}\n","import { useScene } from './useScene'\nimport { useEffect } from 'react'\nimport invariant from 'fbjs/lib/invariant'\n\nexport function useInputEvent(event: string, callback: (event: any) => any) {\n  const scene = useScene()\n\n  useEffect(() => {\n    invariant(\n      !!scene,\n      '`useInputEvent` could not find the scene. Make sure it is used in a component that is a child of <Scene />'\n    )\n\n    scene.input.on(event, callback)\n\n    return () => {\n      scene.input.off(event, callback)\n    }\n  }, [scene, event, callback])\n}\n","import { useScene } from './useScene'\nimport { useEffect } from 'react'\nimport invariant from 'fbjs/lib/invariant'\n\nexport function useKeyboardEvent(event: string, callback: (event: any) => any) {\n  const scene = useScene()\n\n  useEffect(() => {\n    invariant(\n      !!scene,\n      '`useKeyboardEvent` could not find the scene. Make sure it is used in a component that is a child of <Scene />'\n    )\n\n    scene.input.keyboard.on(event, callback)\n    return () => {\n      scene.input.keyboard.off(event, callback)\n    }\n  }, [scene, event, callback])\n}\n","import { useContext } from 'react'\nimport SpawnerContext from '../components/Spawner/SpawnerContext'\n\nexport function useSpawner() {\n  return useContext(SpawnerContext)\n}\n","import * as React from 'react'\nimport SpawnerContext, { SpawnerContextValue } from './SpawnerContext'\n\nexport interface WithSpawnerProps {\n  spawner: SpawnerContextValue\n}\n\nconst withSpawner = <T extends WithSpawnerProps>(\n  Component: React.ComponentType<T>\n) => {\n  function WithSpawner(props: Omit<T, keyof WithSpawnerProps>) {\n    return (\n      <SpawnerContext.Consumer>\n        {spawner => <Component {...(props as T)} spawner={spawner} />}\n      </SpawnerContext.Consumer>\n    )\n  }\n\n  WithSpawner.displayName = `WithSpawner(${Component.displayName})`\n\n  return WithSpawner\n}\n\nexport default withSpawner\n"],"names":["SceneContext","React","useScene","useContext","GameContext","useGame","findGameObjectsByName","scene","name","children","list","filter","child","useArcadeCollider","obj1","obj2","args","onCollide","onProcess","overlapOnly","collider","useRef","useLayoutEffect","current","physics","add","createObjectsArray","destroy","object1","object2","collideCallback","processCallback","objects","obj","Array","isArray","reduce","total","object","SpawnerContext","PROPS_RESERVED","parent","physicsType","instance","applyProps","oldProps","newProps","props","Object","keys","filteredProps","key","indexOf","forEach","p1","p2","newValue","data","dataKey","setData","oldPoint","convertToPoint","newPoint","x","y","setProp","anims","debugShowBody","debugShowVelocity","debugBodyColor","setDebug","disableBody","hideBody","circle","radius","offsetX","offsetY","setCircle","offset","setOffset","body","size","width","height","center","setSize","setScale","point","undefined","updateFromGameObject","methodName","slice","toUpperCase","value","num","ELEMENTS","GameObject","create","__reactPhaser","sceneKey","world","enable","Phaser","Physics","Arcade","STATIC_BODY","DYNAMIC_BODY","GroupContext","createContext","Group","ref","group","useMemo","useImperativeHandle","active","defaultFrame","defaultKey","isParent","Provider","forwardRef","useGroup","GameObjectContext","remove","useGameObject","ArcadeImage","Image","texture","frame","Sprite","animations","animation","play","ArcadeSprite","appendChild","Game","getScene","exists","existing","removeChild","insertBefore","beforeChild","invariant","childExists","index","getIndex","moveTo","addAt","PhaserFiber","Reconciler","getRootHostContext","rootContainerInstance","getChildHostContext","getChildHostContextForEventComponent","parentHostContext","getPublicInstance","prepareForCommit","resetAfterCommit","createInstance","type","root","defaultApplyProps","bind","hideInstance","setActive","unhideInstance","hasOwnProperty","appendInitialChild","finalizeInitialChildren","phaserElement","prepareUpdate","hostContext","lastProps","nextProps","rootContainerElement","updatePayload","propKey","push","nextProp","lastProp","diffProperties","shouldSetTextContent","shouldDeprioritizeSubtree","createTextInstance","text","internalInstanceHandler","mountEventComponent","updateEventComponent","handleEventTarget","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","warnsIfNotActing","now","performanceNow","isPrimaryRenderer","supportsMutation","supportsPersistence","supportsHydration","appendChildToContainer","removeChildFromContainer","insertInContainerBefore","commitUpdate","commitMount","commitTextUpdate","textInstance","oldText","newText","resetTextContent","booting","componentDidMount","this","game","config","events","on","_this2","setState","mountNode","createContainer","injectIntoDevTools","bundleType","version","rendererPackageName","findFiberByHostInstance","findHostInstance","updateContainer","getChildren","componentDidUpdate","state","componentDidCatch","error","errorInfo","console","componentWillUnmount","render","Component","Scene","renderLoading","onPreload","onCreate","onInit","options","useState","loading","setLoading","loadProgress","setLoadProgress","preload","load","once","start","init","listeners","progress","listener","eventNames","event","off","reducer","action","payload","Text","style","gameObject","Error","useReducer","dispatch","spawn","component","uuid","map","onDestroy","onEvent","useEffect","onLoop","callback","time","delta","input","gamepad","keyboard","WithSpawner","Consumer","spawner","displayName"],"mappings":"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"}